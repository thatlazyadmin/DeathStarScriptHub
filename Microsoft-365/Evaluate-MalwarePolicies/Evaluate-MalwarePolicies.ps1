<#
.SYNOPSIS
    This script evaluates each Malware policy in Microsoft 365 and outputs a report showing the configured extensions and missing extensions.

.DESCRIPTION
    The script performs the following actions:
    1. Retrieves all malware filter rules and policies.
    2. Checks each policy for the configured extensions.
    3. Identifies missing extensions from a predefined list.
    4. Outputs a detailed report including the configured extensions and any missing extensions.
    5. Exports the results to a CSV file with a current date stamp.

.PARAMETER None

.EXAMPLE
    .\Evaluate-MalwarePolicies.ps1
    This example runs the script to evaluate malware policies and export the results to a CSV file.

.NOTES
    This script is necessary to ensure that all required file extensions are included in malware policies, enhancing the security posture of the organization.
#>

# Define the list of extensions to check
$L2Extensions = @( 
    "7z", "a3x", "ace", "ade", "adp", "ani", "app", "appinstaller", "applescript", "application", "appref-ms", 
    "appx", "appxbundle", "arj", "asd", "asx", "bas", "bat", "bgi", "bz2", "cab", "chm", "cmd", "com", "cpl", 
    "crt", "cs", "csh", "daa", "dbf", "dcr", "deb", "desktopthemepackfile", "dex", "diagcab", "dif", "dir", 
    "dll", "dmg", "doc", "docm", "dot", "dotm", "elf", "eml", "exe", "fxp", "gadget", "gz", "hlp", "hta", 
    "htc", "htm", "html", "hwpx", "ics", "img", "inf", "ins", "iqy", "iso", "isp", "jar", "jnlp", "js", 
    "jse", "kext", "ksh", "lha", "lib", "library-ms", "lnk", "lzh", "macho", "mam", "mda", "mdb", "mde", 
    "mdt", "mdw", "mdz", "mht", "mhtml", "mof", "msc", "msi", "msix", "msp", "msrcincident", "mst", "ocx", 
    "odt", "ops", "oxps", "pcd", "pif", "plg", "pot", "potm", "ppa", "ppam", "ppkg", "pps", "ppsm", "ppt", 
    "pptm", "prf", "prg", "ps1", "ps11", "ps11xml", "ps1xml", "ps2", "ps2xml", "psc1", "psc2", "pub", "py", 
    "pyc", "pyo", "pyw", "pyz", "pyzw", "rar", "reg", "rev", "rtf", "scf", "scpt", "scr", "sct", 
    "searchConnector-ms", "service", "settingcontent-ms", "sh", "shb", "shs", "shtm", "shtml", "sldm", "slk", 
    "so", "spl", "stm", "svg", "swf", "sys", "tar", "theme", "themepack", "timer", "uif", "url", "uue", 
    "vb", "vbe", "vbs", "vhd", "vhdx", "vxd", "wbk", "website", "wim", "wiz", "ws", "wsc", "wsf", "wsh", 
    "xla", "xlam", "xlc", "xll", "xlm", "xls", "xlsb", "xlsm", "xlt", "xltm", "xlw", "xml", "xnk", "xps", 
    "xsl", "xz", "z"
)

$MissingCount = 0
$ExtensionPolicies = $null
$RLine = $ExtensionReport = @()
$FilterRules = Get-MalwareFilterRule
$DateTime = $(((Get-Date).ToUniversalTime()).ToString("yyyyMMddTHHmmssZ"))
$OutputFilePath = "$PWD\CIS-Report_$($DateTime).txt"
$RLine += "$(Get-Date)`n"

function Test-MalwarePolicy {
    param (
        $PolicyId
    )
    # Find the matching rule for custom policies
    $FoundRule = $null
    $FoundRule = $FilterRules | Where-Object { $_.MalwareFilterPolicy -eq $PolicyId }
    if ($PolicyId.EnableFileFilter -eq $false) {
        $script:RLine += "WARNING: Common attachments filter is disabled."
    }
    if ($FoundRule.State -eq 'Disabled') {
        $script:RLine += "WARNING: The Anti-malware rule is disabled."
    }
    $script:RLine += "`nManual review needed - Domains, inclusions and exclusions must be valid:"
    $script:RLine += $FoundRule | Format-List Name, RecipientDomainIs, Sent*, Except*
}

# Retrieve all malware filter policies
$ExtensionPolicies = Get-MalwareFilterPolicy
if (!$ExtensionPolicies) {
    Write-Host "`nFAIL: No malware filter policies were found." -ForegroundColor Red
    Exit
}

# Check each policy for configured and missing extensions
foreach ($policy in $ExtensionPolicies) {
    $configuredExtensions = $policy.FileTypes -join ', '
    $MissingExtensions = $L2Extensions | Where-Object { $extension = $_; -not $policy.FileTypes.Contains($extension) }
    
    $ExtensionReport += [PSCustomObject]@{
        Identity             = $policy.Identity
        ConfiguredExtensions = $configuredExtensions
        MissingExtensions    = $MissingExtensions -join ', '
        Status               = if ($MissingExtensions.Count -eq 0) { "PASS: Policy contains all required extensions" } else { "FAIL: Policy check failed. Fix the configuration." }
    }
}

# Output the report to a text file
foreach ($entry in $ExtensionReport) {
    $RLine += "-" * 60
    $RLine += "[POLICY] $($entry.Identity)"
    $RLine += "-" * 60
    $RLine += "Configured Extensions:`n$($entry.ConfiguredExtensions)`n"
    if ($entry.Status -eq "FAIL: Policy check failed. Fix the configuration.") {
        $RLine += "NOTICE - The following extensions were not found:`n$($entry.MissingExtensions)`n"
    }
    $RLine += "$($entry.Status)`n"
    Test-MalwarePolicy -PolicyId $entry.Identity
}

Out-File -FilePath $OutputFilePath -InputObject $RLine
Write-Host "`nLog file exported to $OutputFilePath"

# Export results to CSV
$csvOutputFilePath = "$PWD\CIS-Report_$($DateTime).csv"
$ExtensionReport | Export-Csv -Path $csvOutputFilePath -NoTypeInformation
Write-Host "`nCSV file exported to $csvOutputFilePath"